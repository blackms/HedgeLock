version: '3.8'

services:
  # Data ingestion service
  collector:
    build:
      context: .
      dockerfile: docker/Dockerfile.collector
    container_name: hedgelock-collector
    environment:
      - SERVICE_NAME=hedgelock-collector
      - LOG_LEVEL=INFO
      - KAFKA__BOOTSTRAP_SERVERS=kafka:9092
      - BYBIT_API_KEY=${BYBIT_API_KEY:-}
      - BYBIT_API_SECRET=${BYBIT_API_SECRET:-}
      - BYBIT_TESTNET=${BYBIT_TESTNET:-true}
      - MONITORING__METRICS_PORT=9090
    ports:
      - "8001:8000"
      - "9091:9090"
    networks:
      - hedgelock-network
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Risk calculation engine
  risk-engine:
    build:
      context: .
      dockerfile: docker/Dockerfile.risk-engine
    container_name: hedgelock-risk-engine
    environment:
      - SERVICE_NAME=hedgelock-risk-engine
      - LOG_LEVEL=INFO
      - KAFKA__BOOTSTRAP_SERVERS=kafka:9092
      - RISK__LTV_NORMAL_THRESHOLD=0.5
      - RISK__LTV_CAUTION_THRESHOLD=0.65
      - RISK__LTV_DANGER_THRESHOLD=0.8
      - RISK__LTV_CRITICAL_THRESHOLD=0.9
      - MONITORING__METRICS_PORT=9090
    ports:
      - "8002:8002"
      - "9092:9090"
    networks:
      - hedgelock-network
    depends_on:
      - kafka
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/healthz"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Trading execution service
  hedger:
    build:
      context: .
      dockerfile: docker/Dockerfile.hedger
    container_name: hedgelock-hedger
    environment:
      - SERVICE_NAME=hedgelock-hedger
      - LOG_LEVEL=INFO
      - KAFKA__BOOTSTRAP_SERVERS=kafka:9092
      - BYBIT_API_KEY=${BYBIT_API_KEY:-}
      - BYBIT_API_SECRET=${BYBIT_API_SECRET:-}
      - BYBIT_TESTNET=${BYBIT_TESTNET:-true}
      - HEDGER__MAX_ORDER_SIZE_BTC=10.0
      - HEDGER__MAX_POSITION_SIZE_BTC=50.0
      - MONITORING__METRICS_PORT=9090
    ports:
      - "8003:8003"
      - "9093:9090"
    networks:
      - hedgelock-network
    depends_on:
      - kafka
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/healthz"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Trade Executor service
  trade-executor:
    build:
      context: .
      dockerfile: docker/Dockerfile.trade-executor
    container_name: hedgelock-trade-executor
    environment:
      - SERVICE_NAME=hedgelock-trade-executor
      - LOG_LEVEL=INFO
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONSUMER_GROUP=trade-executor-group
      - KAFKA_TOPIC_HEDGE_TRADES=hedge_trades
      - KAFKA_TOPIC_TRADE_CONFIRMATIONS=trade_confirmations
      - BYBIT_API_KEY=${BYBIT_API_KEY:-}
      - BYBIT_API_SECRET=${BYBIT_API_SECRET:-}
      - BYBIT_TESTNET=${BYBIT_TESTNET:-true}
      - EXECUTOR_MAX_ORDER_SIZE_BTC=1.0
      - EXECUTOR_MAX_DAILY_VOLUME_BTC=10.0
      - EXECUTOR_METRICS_PORT=9094
    ports:
      - "8004:8004"
      - "9094:9094"
    networks:
      - hedgelock-network
    depends_on:
      - kafka
      - hedger
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/healthz"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Fund management service
  treasury:
    build:
      context: .
      dockerfile: docker/Dockerfile.treasury
    container_name: hedgelock-treasury
    environment:
      - SERVICE_NAME=hedgelock-treasury
      - LOG_LEVEL=INFO
      - BYBIT_API_KEY=${BYBIT_API_KEY:-}
      - BYBIT_API_SECRET=${BYBIT_API_SECRET:-}
      - BYBIT_TESTNET=${BYBIT_TESTNET:-true}
      - MIN_BUFFER_PERCENT=5
      - MAX_SINGLE_OPERATION_USD=10000
    ports:
      - "8004:8000"
    networks:
      - hedgelock-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Notification service
  alert:
    build:
      context: .
      dockerfile: docker/Dockerfile.alert
    container_name: hedgelock-alert
    environment:
      - SERVICE_NAME=hedgelock-alert
      - LOG_LEVEL=INFO
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
    ports:
      - "8005:8000"
    networks:
      - hedgelock-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 3s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: hedgelock-postgres
    environment:
      - POSTGRES_USER=hedgelock
      - POSTGRES_PASSWORD=hedgelock
      - POSTGRES_DB=hedgelock
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - hedgelock-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hedgelock"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: hedgelock-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - hedgelock-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: hedgelock-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - hedgelock-network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: hedgelock-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_LOG_RETENTION_HOURS: 168
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ./scripts/kafka-init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    networks:
      - hedgelock-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: hedgelock-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: hedgelock
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - hedgelock-network

  # Kafka topic initializer
  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    container_name: hedgelock-kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c"]
    command: |
      "
      echo 'Waiting for Kafka to be ready...'
      kafka-topics --bootstrap-server kafka:29092 --list
      
      echo 'Creating Kafka topics...'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic account_raw --partitions 3 --replication-factor 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic risk_state --partitions 3 --replication-factor 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic hedge_trades --partitions 3 --replication-factor 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic trade_confirmations --partitions 3 --replication-factor 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic treasury_actions --partitions 3 --replication-factor 1
      
      echo 'Listing all topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    networks:
      - hedgelock-network

networks:
  hedgelock-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data: